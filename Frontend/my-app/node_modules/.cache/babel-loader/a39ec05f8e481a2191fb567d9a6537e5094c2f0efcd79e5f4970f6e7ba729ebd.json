{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Project\\\\Frontend\\\\Frontend\\\\React Pages\\\\my-app\\\\src\\\\Controller\\\\ProtectedRoute.js\";\nimport axios from \"axios\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport { createUrl } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  let {\n    allowedRoles,\n    children\n  } = _ref;\n  var isUserValid = sessionStorage.getItem(\"token\");\n  //     console.log(allowedRoles[0]);\n  //   try {\n  //     const url = createUrl();\n  //     const response = await axios.get(url);\n\n  //     if (response.status === 200) {\n  //       const role = response.data.role;\n  //       isUserValid = role === allowedRoles;\n  //     }\n  //     else{\n  isUserValid = tu;\n  //     }\n  //   } catch (ex) {\n  //     isUserValid=false;\n  //     console.error(\"Error fetching user role:\", ex);\n  //   }\n\n  return isUserValid ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 37\n  }, this);\n}\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["axios","Navigate","Outlet","createUrl","jsxDEV","_jsxDEV","ProtectedRoute","_ref","allowedRoles","children","isUserValid","sessionStorage","getItem","tu","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Project/Frontend/Frontend/React Pages/my-app/src/Controller/ProtectedRoute.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Navigate, Outlet } from \"react-router-dom\";\r\nimport { createUrl } from \"../utils/utils\";\r\n\r\n function ProtectedRoute({ allowedRoles, children }) {\r\n  var isUserValid = sessionStorage.getItem(\"token\");\r\n//     console.log(allowedRoles[0]);\r\n//   try {\r\n//     const url = createUrl();\r\n//     const response = await axios.get(url);\r\n\r\n//     if (response.status === 200) {\r\n//       const role = response.data.role;\r\n//       isUserValid = role === allowedRoles;\r\n//     }\r\n//     else{\r\n        isUserValid=tu;\r\n//     }\r\n//   } catch (ex) {\r\n//     isUserValid=false;\r\n//     console.error(\"Error fetching user role:\", ex);\r\n//   }\r\n\r\n  return isUserValid ? <Outlet /> : <Navigate to=\"/login\" />;\r\n}\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,SAAS,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,cAAcA,CAAAC,IAAA,EAA6B;EAAA,IAA5B;IAAEC,YAAY;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACjD,IAAIG,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EACnD;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACQF,WAAW,GAACG,EAAE;EACtB;EACA;EACA;EACA;EACA;;EAEE,OAAOH,WAAW,gBAAGL,OAAA,CAACH,MAAM;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGZ,OAAA,CAACJ,QAAQ;IAACiB,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D;AAACE,EAAA,GApBSb,cAAc;AAsBxB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}